// Code generated by MockGen. DO NOT EDIT.
// Source: util/storage/storage.go

// Package mockstorageutils is a generated GoMock package.
package mockstorageutils

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetFile mocks base method.
func (m *MockStorage) GetFile(filepath string) (bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", filepath)
	ret0, _ := ret[0].(bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStorageMockRecorder) GetFile(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStorage)(nil).GetFile), filepath)
}

// StoreFile mocks base method.
func (m *MockStorage) StoreFile(pathToFile, filename, ext string, data bytes.Buffer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFile", pathToFile, filename, ext, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreFile indicates an expected call of StoreFile.
func (mr *MockStorageMockRecorder) StoreFile(pathToFile, filename, ext, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFile", reflect.TypeOf((*MockStorage)(nil).StoreFile), pathToFile, filename, ext, data)
}
